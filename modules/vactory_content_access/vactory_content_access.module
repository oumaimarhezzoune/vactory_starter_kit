<?php

/**
 * @file
 * Contain related hooks.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_entity_base_field_info().
 */
function vactory_content_access_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'node') {
    $fields['field_content_access_users'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Utilisateurs supplÃ©mentaires'))
      ->setSettings([
        'target_type' => 'user',
      ])
      ->setTranslatable(TRUE)
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => -6,
        'settings' => [],
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('field', TRUE);

    $fields['field_content_access_roles'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Roles'))
      ->setSettings([
        'target_type' => 'user_role',
      ])
      ->setTranslatable(TRUE)
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setDisplayOptions('form', [
        'type' => 'options_select',
        'weight' => -6,
        'settings' => [],
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('field', TRUE);

    $fields['field_content_access_groups'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Groupe utilisateurs'))
      ->setSettings([
        'target_type' => 'taxonomy_term',
        'handler_settings' => ['target_bundles' => ['taxonomy_term' => 'users_groups']],
      ])
      ->setTranslatable(TRUE)
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setDisplayOptions('form', [
        'type' => 'options_select',
        'weight' => -6,
        'settings' => [],
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('field', TRUE);

    $fields['field_content_access_custom'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Custom access key'))
      ->setDescription(t('Enter a custom key to check with in <br> hook_vactory_content_access_alter(&$is_accessible, $key, \Drupal\node\NodeInterface $node)'))
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 6,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('field', TRUE);
  }
  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vactory_content_access_form_node_form_alter(&$form) {
  $config = \Drupal::config('vactory_content_access.settings');
  $bundle = \Drupal::routeMatch()->getRawParameters()->get('node_type');
  if (!isset($bundle)) {
    $node = \Drupal::routeMatch()->getParameter('node');
    if (isset($node) && $node instanceof NodeInterface) {
      $bundle = $node->bundle();
    }
  }
  $style = 'display: none';
  if (isset($bundle) && !empty($bundle)) {
    $is_access_content = $config->get($bundle . '_content_type');
    if (isset($is_access_content) && $is_access_content == 1) {
      $style = '';
    }
  }
  $form['node_content_access'] = [
    '#type' => 'details',
    '#title' => t('Content Access settings'),
    '#group' => 'advanced',
    '#attributes' => [
      'style' => $style,
    ],
    '#open' => FALSE,
    '#access' => \Drupal::currentUser()
      ->hasPermission('administer content access'),
  ];
  $form['field_content_access_users']['#group'] = 'node_content_access';
  $form['field_content_access_roles']['#group'] = 'node_content_access';
  $form['field_content_access_groups']['#group'] = 'node_content_access';
  $form['field_content_access_custom']['#group'] = 'node_content_access';
}

/**
 * Implements hook_preprocess_node().
 */
function vactory_content_access_preprocess_node(&$variables) {
  $node = $variables['node'];
  if (!empty($node) && isset($node)) {
    $config = \Drupal::config('vactory_content_access.settings');
    $node_types = \Drupal::service('entity_type.bundle.info')->getBundleInfo('node');
    $types = [];
    foreach ($node_types as $key => $value) {
      $is_access_content = $config->get($key . '_content_type');
      if (isset($is_access_content) && $is_access_content == 1) {
        array_push($types, $key);
      }
    }
    if (in_array($node->bundle(), $types)) {
      $is_accessible_services = \Drupal::service('vactory_content_access.access_manager');
      $is_accessible = $is_accessible_services->isAccessible($node, $types, 'field_content_access_groups', 'field_content_access_users', 'field_content_access_roles', NULL);
      if ($variables['view_mode'] == 'full') {
        if (!$is_accessible) {
          $redirect_to = $config->get($node->bundle() . '_redirect_to');
          if (isset($redirect_to) && !empty($redirect_to)) {
            if ($redirect_to == 403) {
              throw new AccessDeniedHttpException();
            }
            else {
              throw new NotFoundHttpException();
            }
          }
          else {
            throw new NotFoundHttpException();
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_access_records().
 */
function vactory_content_access_node_access_records(NodeInterface $node) {
  $grants = [];
  if ($node->isPublished()) {
    $config = \Drupal::config('vactory_content_access.settings');
    $node_types = \Drupal::service('entity_type.bundle.info')->getBundleInfo('node');
    $types = [];
    foreach ($node_types as $key => $value) {
      $is_access_listing = $config->get($key . '_listing_access');
      if (isset($is_access_listing) && $is_access_listing == 1) {
        array_push($types, $key);
      }
    }
    if (in_array($node->bundle(), $types) && isPrivateNode($node)) {
      $grants[] = [
        'realm' => 'vactory_content_access',
        'gid' => $node->id(),
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      ];
    }
  }

  return $grants;
}

/**
 * Check if node is private.
 */
function isPrivateNode(NodeInterface $node) {
  $count = 0;
  if ($node->hasField('field_content_access_groups') && !empty($node->get('field_content_access_groups')->getValue())) {
    $count++;
  }

  if ($node->hasField('field_content_access_users') && !empty($node->get('field_content_access_users')->getValue())) {
    $count++;
  }

  if ($node->hasField('field_content_access_roles') && !empty($node->get('field_content_access_roles')->getValue())) {
    $count++;
  }

  if ($count > 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_node_grants().
 */
function vactory_content_access_node_grants(AccountInterface $account, $op) {
  $grants = [];
  if ($op == 'view') {
    $user = Drupal::entityTypeManager()->getStorage('user')
      ->load($account->id());

    // Get user grants IDs from cache if exist.
    $cid = 'vactory_users_grants_' . $user->id() . $user->get('name')->value;
    $user_grants = !empty(Drupal::cache()->get($cid)) ? Drupal::cache()->get($cid)->data : [];
    if (empty($user_grants)) {
      $config = \Drupal::config('vactory_content_access.settings');
      $node_types = \Drupal::service('entity_type.bundle.info')->getBundleInfo('node');
      $types = [];
      foreach ($node_types as $key => $value) {
        $is_access_listing = $config->get($key . '_listing_access');
        if (isset($is_access_listing) && $is_access_listing == 1) {
          array_push($types, $key);
        }
      }
      // Get user grants IDs.
      $user_grants = get_user_grants($user, $types);
    }
    $grants['vactory_content_access'] = $user_grants;

  }
  return $grants;
}

/**
 * Get User Grants.
 */
function get_user_grants($user, $types) {
  $cid = 'vactory_users_grants_' . $user->id() . $user->get('name')->value;
  $user_grants = !empty(Drupal::cache()->get($cid)) ? Drupal::cache()->get($cid)->data : [];
  if (empty($user_grants) && !empty($types)) {
    $user_grants = [];
    // Load all private content.
    $nodes = Drupal::entityTypeManager()->getStorage('node')
      ->loadByProperties([
        'status' => 1,
        'type' => $types,
      ]);
    if (!empty($nodes)) {
      $is_accessible_services = \Drupal::service('vactory_content_access.access_manager');
      foreach ($nodes as $node) {
        $is_accessible = $is_accessible_services->isAccessible($node, $types, 'field_content_access_groups', 'field_content_access_users', 'field_content_access_roles', $user);
        // Check if user has access to node then use node id as grant id.
        if ($is_accessible) {
          $user_grants[] = $node->id();
        }
      }
      Drupal::cache()->set($cid, $user_grants);
    }
  }

  return $user_grants;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function vactory_content_access_node_presave(EntityInterface $entity) {
  $config = \Drupal::config('vactory_content_access.settings');
  $bundle = $entity->bundle();
  $is_access_listing = $config->get($bundle . '_listing_access');
  if ($is_access_listing) {
    flush_user_access_cache();
  }
}

/**
 * Flush vactory content access users grants cache.
 */
function flush_user_access_cache() {
  Drupal::database()->query("DELETE FROM cache_default WHERE cid LIKE 'vactory_users_grants%'")
    ->execute();
}

/**
 * Implements hook_user_logout().
 */
function vactory_content_access_user_logout(AccountInterface $account) {
  $cid = 'vactory_users_grants_' . $account->id() . $account->getAccountName();
  Drupal::cache()->delete($cid);
}
