<?php

/**
 * @file
 * This was auto-generated by Vactory Generator module.
 */

use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;
use Drupal\media\Entity\Media;
use Drupal\taxonomy\Entity\Term;
use Drupal\file\Entity\File;
use Drupal\views\ViewExecutable;
use Drupal\block_content\Entity\BlockContent;

/**
 * Implements hook_theme().
 */
function vactory_news_theme($existing, $type, $theme, $path) {
  return [
    // Node > card.
    'node__vactory_news__card' => [
      'base hook' => 'node',
      'template' => 'card',
    ],
    // Node > card inline.
    'node__vactory_news__card_inline' => [
      'base hook' => 'node',
      'template' => 'card-inline',
    ],
    // Node > Masonry.
    'node__vactory_news__masonry' => [
      'base hook' => 'node',
      'template' => 'masonry',
    ],
    // Node > full.
    'node__vactory_news__full' => [
      'base hook' => 'node',
      'template' => 'full',
    ],
    // Node > Smart search.
    'node__vactory_news__smart_search' => [
      'base hook' => 'node',
      'template' => 'smart-search',
    ],
    // Node > mur.
    'node__vactory_news__mur' => [
      'base hook' => 'node',
      'template' => 'mur',
    ],

    // Node > full.
    'node__view__vactory_news__mosaique' => [
      'base hook' => 'node',
      'template' => 'block-mosaique',
    ],
    'vactory_news_block_filtred_by_taxonomy' => [
      'template' => 'block-filtred-by-taxonomy',
      "variables" => [
        "content" => [],
      ],
    ],
  ];
}

/**
 * Implements hook_views_pre_view().
 */
function vactory_news_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  $route_name = Drupal::routeMatch()->getRouteName();
  // Do nothing in jsonapi call case.
  if (strpos($route_name, 'jsonapi') === 0) {
    return;
  }
  // Check if header is enabled.
  $is_header_enabled = !empty($view->display_handler->options['header']) ? TRUE : FALSE;
  if ($view->id() == 'vactory_news' && $is_header_enabled) {
    // Get the header block machine name.
    $block_machine_name = $view->display_handler->options['header']['entity_block_content']['target'];
    if (!empty($block_machine_name)) {
      $entity_manager = \Drupal::service('entity_type.manager');
      // Load Block by machine name.
      $block = $entity_manager->getStorage('block_content')
        ->loadByProperties(['block_machine_name' => $block_machine_name]);

      if (is_array($block) && reset($block) instanceof BlockContent) {
        // Get block view display.
        $block_content = $entity_manager->getViewBuilder('block_content')
          ->view(reset($block));
        // Override the view header for the current display.
        $item = [
          'id' => 'area_text_custom',
          'table' => 'views',
          'field' => 'area_text_custom',
          'relationship' => 'none',
          'group_type' => 'none',
          'admin_label' => '',
          'empty' => TRUE,
          'tokenize' => FALSE,
          'content' => \Drupal::service('renderer')
            ->renderPlain($block_content),
          'plugin_id' => 'text_custom',
        ];
        $view->setHandler($display_id, 'header', 'area_text_custom', $item);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_news_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  if ($view instanceof ViewExecutable && $view->id() === 'vactory_news' && $view->display_handler->getPluginId() === 'block') {
    $args = $view->args;
    if (count($args) > 1 && isset($args[1]) && is_array($args[1])) {
      $meta_data = $args[1];
      if (isset($meta_data['news_term_id'])) {
        $args[0] = $meta_data['news_term_id'];
      }
      $term = Drupal::entityTypeManager()->getStorage('taxonomy_term')
        ->load($args[0]);
      $parents = $term->get('parent')->getValue();
      $parents = array_filter($parents, function ($parent) {
        return $parent['target_id'] !== '0' && $parent['target_id'] !== 0;
      });
      $has_parent = !empty($parents);
      if (isset($meta_data['override_more_link']) && $meta_data['override_more_link']) {
        $use_more = $view->display_handler->options['use_more'];
        $link_display = $view->display_handler->options['link_display'];
        if ($use_more && $link_display) {
          $handlers_configurations = $view->displayHandlers->getConfiguration();
          if (isset($handlers_configurations[$link_display])) {
            $filters = $handlers_configurations[$link_display]['display_options']['filters'];
            if (!empty($filters)) {
              $filter_name = '';
              // Check in view filter if we have taxonomy tid depth filter.
              $taxonomy_tid_depth_filter = array_filter($filters, function ($filter) {
                return $filter['plugin_id'] === 'taxonomy_index_tid_depth';
              });
              // In case of parent term and view taxonomy tid depth filter exist.
              if (!$has_parent && !empty($taxonomy_tid_depth_filter)) {
                $filter_name = reset($taxonomy_tid_depth_filter)['id'];
              }
              if (empty($filter_name)) {
                $filters_ids = array_map(function ($filter) {
                  return isset($filter['expose']['identifier']) ? $filter['expose']['identifier'] : $filter['id'];
                }, $filters);
                $field_name = $meta_data['field_name'];
                $matches = preg_grep('#(.)*' . $field_name . '(.)*#', array_flip($filters_ids));
                if (!empty($matches)) {
                  $filter_name = array_keys($matches)[0];
                }
              }
              if (isset($variables['more']['#url']) && !empty($filter_name)) {
                $listing_route = 'view.' . $view->id() . '.' . $link_display;
                $variables['more']['#url'] = Url::fromRoute($listing_route, [$filter_name => $args[0]]);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * A custom hook to alter the node access.
 *
 * @param array $normalized_node
 *   An array that contains normalized node fields to be altered.
 * @param string $context
 *   Extra data has two keys:
 *     node: the related node object.
 *     node_type: the related node content type machine name.
 * @param string $base_node_type
 *   Base node content type machine name.
 */
function vactory_news_jsonapi_vcc_normalized_node_alter(&$normalized_node, $context, $base_node_type) {
  if ($base_node_type === 'vactory_news') {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $context['node'];
    $node_type = $context['node_type'];
    if ($node_type === 'vactory_news') {
      // Get image.
      $lqipImageStyle = ImageStyle::load('lqip');
      $output_field_name = 'field_vactory_media';
      $mid = $node->get($output_field_name)->getString();
      $result[$output_field_name] = NULL;
      if (!empty($mid)) {
        $mid = (int) $mid;
        $media = Media::load($mid);
        if (
          $media &&
          $media->bundle() === 'image' &&
          isset($media->get('field_media_image')->getValue()[0]['target_id'])
        ) {
          $fid = $media->get('field_media_image')->getValue()[0]['target_id'];
          $file = File::load($fid);
          if ($file != NULL) {
            $uri = $file->getFileUri();
            $fileResult = [];
            $media_file_manager = \Drupal::service('vacory_decoupled.media_file_manager');
            $fileResult['_default'] = $media_file_manager->getMediaAbsoluteUrl($uri);
            $fileResult['_lqip'] = $media_file_manager->convertToMediaAbsoluteUrl($lqipImageStyle->buildUrl($uri));
            $fileResult['uri'] = StreamWrapperManager::getTarget($uri);
            $fileResult['fid'] = $fid;
            $fileResult['file_name'] = $media->label();
            $fileResult['meta'] = $media->get('field_media_image')
              ->first()
              ->getValue();
            $result[$output_field_name] = $fileResult;
          }
        }

      }

      // Get date.
      $dateFormats = \Drupal::entityTypeManager()
        ->getStorage('date_format')
        ->loadMultiple();
      $dateFormatter = \Drupal::service('date.formatter');
      $resultDate = [];
      $date_field_name = 'field_vactory_date';
      $d = isset($node->get($date_field_name)
          ->getValue()[0]['value']) ? DateTime::createFromFormat('Y-m-d', $node->get($date_field_name)
        ->getValue()[0]['value']) : '';
      if ($d != '') {
        $vactory_date_timestamp = $d->getTimestamp();
        // Get date.
        $date_formats = array_keys($dateFormats);
        $resultDate['timestamp'] = $vactory_date_timestamp;

        foreach ($date_formats as $key => $date_format) {
          $resultDate[$date_format] = $dateFormatter->format($vactory_date_timestamp, $date_format);
        }
      }
      // Get term.
      $term_field_name = 'field_vactory_news_theme';
      $news_term_tid = $node->get($term_field_name)->target_id ?? NULL;
      $term_value = [];
      if ($news_term_tid != NULL) {
        $new_term = Term::load($news_term_tid);
        if ($new_term != NULL) {
          $new_term_trans = $term = \Drupal::service('entity.repository')
            ->getTranslationFromContext($new_term);
          $term_value['name'] = $new_term_trans->label();
          $term_value['slug'] = $new_term_trans->get('term_2_slug')->value ?? NULL;
        }
      }

      $normalized_node = [
        'id' => $node->id(),
        'image' => $result[$output_field_name],
        'date' => $resultDate,
        'tag' => $term_value,
        'title' => $node->label(),
        'excerpt' => $node->get('field_vactory_excerpt')->getValue(),
        'url' => $node->toUrl()->toString(),
      ];

    }
  }
}

/**
 * Implements hook_json_api_collection_alter().
 */
function vactory_news_json_api_collection_alter(&$filters, &$context) {

  if ($context['id'] === 'vactory_news_pre_filtered_block') {
    if ($filters['optional_filters_data']['taxonomy_term']['vactory_news_theme']) {
      $filters["filter[internal_thematic][condition][path]"] = "field_vactory_news_theme.drupal_internal__tid";
      $filters["filter[internal_thematic][condition][operator]"] = "=";
      $filters["filter[internal_thematic][condition][value]"] = $filters['optional_filters_data']['taxonomy_term']['vactory_news_theme'];
    }
  }

  if ($context['id'] === 'vactory_news_list') {
    $query = \Drupal::request()->query->get("q");
    if (empty($query)) {
      return;
    }

    if (isset($query["page"])) {
      $filters["page[offset]"] = intval($query["page"]) > 0 ? (intval($query["page"]) - 1) * $filters["page[limit]"] : 0;
    }

    if (isset($query["sort"]) && in_array(strtolower($query["sort"]), ["asc", "desc"])) {
      $filters["sort[sort-vactory-date][direction]"] = strtolower($query["sort"]);
    }

    if (isset($query["theme"]) && $query["theme"] !== "all") {
      $theme = $query["theme"];
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'vid' => 'vactory_news_theme',
        'term_2_slug' => $query["theme"]
      ]);

      if (!$terms) {
        throw new \Exception("[News - hook_json_api_collection_alter] term '$theme' not found.");
      }

      if ($terms) {
        $term = reset($terms);
        $id = $term->id();
        $filters["filter[internal_category][condition][path]"] = "field_vactory_news_theme.drupal_internal__tid";
        $filters["filter[internal_category][condition][operator]"] = "=";
        $filters["filter[internal_category][condition][value]"] = $id;
      }

    }
  }

}
