<?php

/**
 * @file
 * Contain related hooks.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Component\Render\MarkupInterface;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\Plugin\Field\FieldWidget\StringTextareaWidget;
use Drupal\Core\Field\Plugin\Field\FieldWidget\StringTextfieldWidget;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\jquery_colorpicker\Plugin\Field\FieldWidget\JQueryColorpickerWidget;
use Drupal\symfony_mailer\Address;
use Drupal\symfony_mailer\EmailInterface;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Drupal\core\Site\Settings;

/**
 * Implements hook_theme().
 */
function vactory_core_theme() {
  return [
    // Page > 404.
    'page__404'                          => [
      'base hook' => 'page',
      'template'  => 'page--404',
    ],
    // Page > 403.
    'page__403'                          => [
      'base hook' => 'page',
      'template'  => 'page--403',
    ],
    // Page > /admin/reports/status.
    // Add Factory Version.
    'status_report_general_info_vactory' => [
      'template' => 'status-report-page-vactory',
    ],
    'vactory_responsive_image'           => [
      'variables' => [
        'meta'   => [],
        'srcset'    => [],
      ],
    ],
    'vactory_image' => [
      'template' => 'vactory-image',
      'variables' => [
        'image' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_element_info_alter().
 */
function vactory_core_element_info_alter(array &$info) {
  if (isset($info['more_link']['#theme_wrappers']['container']['#attributes']['class'])) {
    $info['more_link']['#theme_wrappers']['container']['#attributes']['class'][] = 'vf-more-link';
  }

  if (isset($info['actions'])) {
    $info['actions']['#attributes']['class'][] = 'form-group';
  }
}

/**
 * Implements hook_entity_type_build().
 */
function vactory_core_entity_type_build(array &$entity_types) {
  if (isset($entity_types['paragraph'])) {
    $entity_types['paragraph']->setClass('Drupal\vactory_core\Entity\VactoryParagraph');
  }
}

/**
 * Implements hook_mail_alter().
 *
 * @deprecated To be remove once swiftmailer contrib module has been removed.
 */
function vactory_core_mail_alter(&$message) {
  switch ($message['key']) {
    case 'page_mail':
    case 'page_copy':
    case 'cancel_confirm':
    case 'password_reset':
    case 'register_admin_created':
    case 'register_no_approval_required':
    case 'register_pending_approval':
    case 'register_pending_approval_admin':
    case 'status_activated':
    case 'status_blocked':
    case 'status_canceled':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      foreach ($message['body'] as $key => $body) {
        $message['body'][$key] = new FormattableMarkup($body, []);
      }
      break;
  }

  // Redirect all site mails (except reset password mail),
  // When vactory_mail_redirect is defined.
  $route_name = Drupal::routeMatch()->getRouteName();
  $mail_redirect = Settings::get('vactory_mail_redirect', FALSE);
  if ($mail_redirect && !empty($mail_redirect) && $route_name !== 'user.pass') {
    $mail_dist = str_replace(',', ' ', $message['to']);
    $prefix = t('Destination addresse(s)');
    $to = $prefix . ': ' . $mail_dist;
    $message['to'] = $to . '<' . $mail_redirect . '>';
  }
}

/**
 * Implements hook_mailer_build().
 */
function vactory_core_mailer_build(EmailInterface $email) {
  // Redirect all site mails (except reset password mail),
  // When vactory_mail_redirect is defined.
  $route_name = Drupal::routeMatch()->getRouteName();
  $mail_redirect = Settings::get('vactory_mail_redirect', FALSE);
  if ($mail_redirect && !empty($mail_redirect) && $route_name !== 'user.pass') {
    $subject = $email->getSubject();
    $to = $email->getTo();
    $subject = $subject instanceof MarkupInterface ? $subject->__toString() : $subject;
    $to = array_map(function ($address) {
      return $address->getEmail();
    }, $to);
    $to = implode(' ', $to);
    $subject .= " (To: {$to})";
    $address = new Address($mail_redirect, 'Mail Redirect');
    $email->setTo($address);
    $email->setSubject($subject);
  }
}

/**
 * Implements hook_token_info().
 */
function vactory_core_token_info() {

  $types['vactory'] = [
    'name'        => t('Vactory'),
    'description' => t('Vactory custom token type'),
  ];
  $tokens['site_logo'] = [
    'name'        => t('Site logo'),
    'description' => t('The logo of the site.'),
  ];

  $tokens['node_summary'] = [
    'name'        => t('Node summary'),
    'description' => t('The description of the current page.'),
  ];

  return [
    'types'  => $types,
    'tokens' => [
      'vactory' => $tokens,
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function vactory_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  if ($type == 'vactory') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'site_logo':
          $theme_name = \Drupal::service('theme.manager')
            ->getActiveTheme()
            ->getName();
          $replacements[$original] = \Drupal::service('file_url_generator')->generateAbsoluteString(substr(theme_get_setting('logo.url', $theme_name), 1));
          break;

        case 'node_summary':
          $value = (isset($data['node']) && $data['node']->get('node_summary')->first() && isset($data['node']->get('node_summary')->first()->getValue()['value'])) ? $data['node']->get('node_summary')->first()->getValue()['value'] : '';
          $replacements[$original] = $value;
          break;

      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_form_alter().
 */
function vactory_core_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Node type form.
  if ($form_id == 'node_type_edit_form' || $form_id == 'node_type_add_form') {
    unset($form['workflow']['options']['#default_value']['promote']);
    unset($form['workflow']['options']['#default_value']['sticky']);
    $form['display']['display_submitted']['#default_value'] = FALSE;
  }

  // Dropdown XSS.
  if ($form_id === 'lang_dropdown_form') {
    $current_url = Url::fromRoute('<current>')->toString();
    $form['#action'] = Xss::filter($current_url);
  }

  // Set default OpenGraph image url token.
  $route_match = Drupal::service('current_route_match');
  $concerned_routes = ['entity.node.edit_form', 'node.add'];
  if (in_array($route_match->getRouteName(), $concerned_routes)) {
    $route_params = $route_match->getParameters();
    $node_type = !empty($route_params->get('node')) ? $route_params->get('node')->bundle() : $route_params->get('node_type')->get('type');
    $opengraph_default_images = Drupal::service('config.factory')
      ->get('vactory_core.opengraph_default_image.settings')
      ->get('default_content_opengraph_images');
    if (isset($form['field_vactory_meta_tags']) && isset($opengraph_default_images[$node_type])) {
      $form['field_vactory_meta_tags']['widget'][0]['open_graph']['og_image']['#default_value'] = $opengraph_default_images[$node_type]['default_opengraph_image'];
      $form['field_vactory_meta_tags']['widget'][0]['open_graph']['og_image_url']['#default_value'] = $opengraph_default_images[$node_type]['default_opengraph_image'];
      $form['field_vactory_meta_tags']['widget'][0]['open_graph']['og_image_secure_url']['#default_value'] = $opengraph_default_images[$node_type]['default_opengraph_image'];
    }
  }

  // Make revision log message optional.
  $route_name = Drupal::service('current_route_match')->getRouteName();
  if ($route_name == 'entity.node.edit_form') {
    if (isset($form['revision'])) {
      $form['revision']['#default_value'] = TRUE;
      $form['revision']['#access'] = FALSE;
    }
    unset($form['promote'], $form['sticky']);
  }

  $concerned_routes = [
    'entity.menu.add_link_form',
    'entity.menu_link_content.canonical',
  ];
  if (in_array($route_name, $concerned_routes)) {
    // Auto generate css ID for menu links.
    if (isset($form['options']['attributes']['id']) && empty($form['options']['attributes']['id']['#default_value'])) {
      $timestamp = (new DateTime())->getTimestamp();
      $timestamp = base64_encode($timestamp);
      $timestamp = str_replace('=', '', strtolower($timestamp));
      $css_id = 'menu-link-' . $timestamp;
      $form['options']['attributes']['id']['#default_value'] = $css_id;
    }

    // Remove attributes widget provided by link_attributes module if exist.
    if (isset($form['link']['widget'][0]['options']['attributes'])) {
      unset($form['link']['widget'][0]['options']['attributes']);
    }
  }

  // Allow changing file fields stream wrapper settings.
  if ($form_id === 'field_storage_config_edit_form') {
    $form['settings']['uri_scheme']['#disabled'] = FALSE;
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function vactory_core_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'block_content') {
    $fields['block_machine_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Machine Name'))
      ->setRequired(TRUE)
      ->setTranslatable(FALSE)
      ->setDisplayOptions('form', [
        'type'   => 'string_textfield',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->addConstraint('UniqueField', []);
  }

  if ($entity_type->id() === 'menu_link_content') {
    $fields['menu_role_show_role'] = BaseFieldDefinition::create('entity_reference')
      ->setName('menu_per_role__show_role')
      ->setTargetEntityTypeId('menu_link_content')
      ->setLabel(t('Roles able to see the menu link'))
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setSetting('target_type', 'user_role')
      ->setDisplayOptions('form', [
        'type'   => 'options_buttons',
        'weight' => 0,
      ]);
  }

  return $fields;
}

/**
 * Implements hook_page_attachments().
 */
function vactory_core_page_attachments(array &$page) {
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme();
  $front_theme = \Drupal::config('system.theme')->get('default');
  if ($active_theme->getName() != $front_theme) {
    $page['#attached']['library'][] = 'vactory_core/ckeditor_config';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function vactory_core_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Get Request Object.
  $request = \Drupal::request();

  // If there is HTTP Exception..
  if ($exception = $request->attributes->get('exception')) {
    if (
      !(
        gettype($exception) == 'object' &&
        ($exception instanceof NotFoundHttpException || $exception instanceof AccessDeniedHttpException)
      )
    ) {
      return;
    }
    // Get the status code.
    $status_code = $exception->getStatusCode();
    if (in_array($status_code, [
      Response::HTTP_FORBIDDEN,
      Response::HTTP_NOT_FOUND,
    ])) {
      $suggestions[] = 'page__' . $status_code;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function vactory_core_theme_suggestions_status_report_general_info_alter(&$suggestions, &$vars) {
  $suggestions[] = 'status_report_general_info_vactory';
}

/**
 * Implements hook_page_attachments_alter().
 */
function vactory_core_page_attachments_alter(array &$attachments) {
  foreach ($attachments['#attached']['html_head'] as $key => $attachment) {
    if ($attachment[1] == 'system_meta_generator') {
      unset($attachments['#attached']['html_head'][$key]);
    }
    if ($attachment[1] == 'addtoany-js') {
      unset($attachments['#attached']['html_head'][$key]);
    }
  }
  $addtoany_lib = array_search('addtoany/addtoany', $attachments['#attached']['library']);
  if ($addtoany_lib !== FALSE) {
    unset($attachments['#attached']['library'][$addtoany_lib]);
  }
}

/**
 * Implements hook_xmlsitemap_link_alter().
 */
function vactory_core_xmlsitemap_link_alter(array &$link, array $context) {
  // Prevent homepage from being figured on xml sitemap twice.
  $front_page = Drupal::config('system.site')->get('page')['front'];
  if ($link['loc'] === $front_page) {
    $link['status'] = 0;
    $link['acccess'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_core_preprocess_block(&$variables) {
  if (isset($variables['plugin_id']) && $variables['plugin_id'] === 'addtoany_block') {
    $config = \Drupal::config('addtoany.settings');
    // Initial JavaScript.
    $additional_js = $config->get('additional_js');
    if (\Drupal::moduleHandler()->moduleExists('token')) {
      $node = \Drupal::routeMatch()->getParameter('node');
      $data = [];
      if ($node) {
        if (is_numeric($node)) {
          $node = Drupal::service('entity_type.manager')->getStorage('node')
            ->load($node);
        }
        $data = ['node' => $node];
        $additional_js = \Drupal::token()->replace($additional_js, $data);
      }
    }
    $javascript_header = 'window.a2a_config=window.a2a_config||{};a2a_config.callbacks=[];a2a_config.overlays=[];a2a_config.templates={};'
      . (($config->get('no_3p')) ? 'a2a_config.no_3p=1;' : '')
      . $additional_js;
    $variables['#attached']['html_head'][] = [
      // The data.
      [
        // Add a <script> tag.
        '#tag' => 'script',
        // Add JavaScript to the <script> tag.
        '#value' => Markup::create($javascript_header),
        // Give weight so it appears after meta tags, etc.
        '#weight' => 10,
      ],
      // Assign a key to reference this HTML <HEAD> element when altering.
      'addtoany-js',
    ];
    $variables['#attached']['library'][] = 'addtoany/addtoany';
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function vactory_core_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['widget'] instanceof JQueryColorpickerWidget) {
    unset($element['name']);
  }
  if ($context['widget'] instanceof StringTextareaWidget || $context['widget'] instanceof StringTextfieldWidget) {
    // Get admin theme.
    $admin_theme_name = \Drupal::config('system.theme')->get('admin');
    // Get active theme.
    $current_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
    if ($current_theme === $admin_theme_name && (isset($element['#maxlength']) || isset($element['value']['#maxlength']))) {
      addCounterToTextElement($element);
    }
  }
}

/**
 * Attach textfield counter library to given element.
 */
// phpcs:disable
function addCounterToTextElement(&$element) {
  // phpcs:enable
  $delta = $element['#delta'];
  $key = 'text-field-' . $delta;
  if (isset($element['value'])) {
    $maxlength = $element['value']['#maxlength'];
    $element['value']['#attributes']['class'][] = $key;
    $element['value']['#attributes']['class'][] = 'textfield-counter-element';
    $element['value']['#attributes']['data-field-definition-id'] = $key;
    $element['value']['#attached']['library'][] = 'textfield_counter/counter';
    $element['value']['#attached']['drupalSettings']['textfieldCounter'][$key]['key'][$delta] = $key;
    $element['value']['#attached']['drupalSettings']['textfieldCounter'][$key]['maxlength'] = (int) $maxlength;
    $element['value']['#attached']['drupalSettings']['textfieldCounter'][$key]['counterPosition'] = 'after';
    $element['value']['#attached']['drupalSettings']['textfieldCounter'][$key]['textCountStatusMessage'] = '<span class="current_count">@current_length</span>/<span class="maxlength_count">@maxlength</span>';
    $element['value']['#attached']['drupalSettings']['textfieldCounter'][$key]['preventSubmit'] = TRUE;
    $element['value']['#attached']['drupalSettings']['textfieldCounter'][$key]['countHTMLCharacters'] = 0;
  }
  else {
    $maxlength = $element['#maxlength'];
    $element['#attributes']['class'][] = $key;
    $element['#attributes']['class'][] = 'textfield-counter-element';
    $element['#attributes']['data-field-definition-id'] = $key;
    $element['#attached']['library'][] = 'textfield_counter/counter';
    $element['#attached']['drupalSettings']['textfieldCounter'][$key]['key'][$delta] = $key;
    $element['#attached']['drupalSettings']['textfieldCounter'][$key]['maxlength'] = (int) $maxlength;
    $element['#attached']['drupalSettings']['textfieldCounter'][$key]['counterPosition'] = 'after';
    $element['#attached']['drupalSettings']['textfieldCounter'][$key]['textCountStatusMessage'] = '<span class="current_count">@current_length</span>/<span class="maxlength_count">@maxlength</span>';
    $element['#attached']['drupalSettings']['textfieldCounter'][$key]['preventSubmit'] = TRUE;
    $element['#attached']['drupalSettings']['textfieldCounter'][$key]['countHTMLCharacters'] = 0;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_core_preprocess_pager(&$variables) {
  if (isset($variables['items'])) {
    $first = $variables['items']['first'] ?? [];
    $previous = $variables['items']['previous'] ?? [];
    $pages = $variables['items']['pages'] ?? [];
    $next = $variables['items']['next'] ?? [];
    $last = $variables['items']['last'] ?? [];
    if (!empty($pages)) {
      foreach ($pages as &$page) {
        if (isset($page['href'])) {
          vactory_core_clean_pager_query_param($page['href']);
        }
      }
      $variables['items']['pages'] = $pages;
    }
    if (!empty($first) && isset($first['href'])) {
      vactory_core_clean_pager_query_param($first['href']);
      $variables['items']['first'] = $first;
    }
    if (!empty($previous) && isset($previous['href'])) {
      vactory_core_clean_pager_query_param($previous['href']);
      $variables['items']['previous'] = $previous;
    }
    if (!empty($next) && isset($next['href'])) {
      vactory_core_clean_pager_query_param($next['href']);
      $variables['items']['next'] = $next;
    }
    if (!empty($last) && isset($last['href'])) {
      vactory_core_clean_pager_query_param($last['href']);
      $variables['items']['last'] = $last;
    }
  }
}

/**
 * Clean pager query param.
 */
function vactory_core_clean_pager_query_param(&$str) {
  if (!empty($str) && strpos($str, '?') !== FALSE) {
    $queryStringPieces = explode('?', $str);
    if (isset($queryStringPieces[1])) {
      $queryString = $queryStringPieces[1];
      parse_str($queryString, $query_params);
      if (isset($query_params['page'])) {
        if (!is_numeric($query_params['page']) && strpos($query_params['page'], ',') !== FALSE) {
          $query_params['page'] = explode(',', $query_params['page'])[0];
        }
        if (is_numeric($query_params['page']) && (int) $query_params['page'] === 0) {
          unset($query_params['page']);
        }
      }
      if (isset($query_params['_wrapper_format'])) {
        unset($query_params['_wrapper_format']);
      }
      $queryString = http_build_query($query_params);
      if (!empty($queryString)) {
        $queryStringPieces[1] = $queryString;
        $str = implode('?', $queryStringPieces);
      }
      if (empty($queryString)) {
        $str = "";
        if (!empty($queryStringPieces[0])) {
          $str = $queryStringPieces[0];
        }
      }
    }
  }
}
