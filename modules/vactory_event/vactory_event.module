<?php

/**
 * @file
 * This was auto-generated by Vactory Generator module.
 */

use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\image\Entity\ImageStyle;
use Drupal\media\Entity\Media;
use Drupal\taxonomy\Entity\Term;
use Drupal\file\Entity\File;

/**
 * Implements hook_theme().
 */
function vactory_event_theme($existing, $type, $theme, $path) {
  return [
    // Node > card.
    'node__vactory_event__card' => [
      'base hook' => 'node',
      'template'  => 'card',
    ],
    // Node > card inline.
    'node__vactory_event__card_inline' => [
      'base hook' => 'node',
      'template'  => 'card-inline',
    ],
    // Node > Masonry.
    'node__vactory_event__masonry' => [
      'base hook' => 'node',
      'template'  => 'masonry',
    ],
    // Node > full.
    'node__vactory_event__full' => [
      'base hook' => 'node',
      'template'  => 'full',
    ],
    // Node > Smart search.
    'node__vactory_event__smart_search' => [
      'base hook' => 'node',
      'template'  => 'smart-search',
    ],
    // Node > Mur.
    'node__vactory_event__mur' => [
      'base hook' => 'node',
      'template'  => 'mur',
    ],

    'vactory_event_block_filtered_by_taxonomy' => [
      'template' => 'block-filtered-by-taxonomy',
      'variables' => [
        'content' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function vactory_event_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'vactory_event') {
    $node = $variables['node'];
    $date = $node->get('field_vactory_date_interval');

    if (isset($date) && !empty($date)) {
      $date = $node->get('field_vactory_date_interval')->getValue();

      if (!isset($date[0])) {
        return;
      }

      $start_date = $date[0]['value'];
      $end_date = $date[0]['end_value'];
      $date_formater = \Drupal::service('date.formatter');
      $timezones = 'UTC';

      // Start date.
      if (isset($start_date) && !empty($start_date)) {
        $variables['content']['field_vactory_date_interval']['date_start'] = [
          'day_full'  => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($start_date), 'custom', 'l', $timezones),
            '#attributes' => ['class' => ['day']],
          ],
          'day_short' => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($start_date), 'custom', 'd', $timezones),
            '#attributes' => ['class' => ['day-short']],
          ],
          'month'     => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($start_date), 'custom', 'F', $timezones),
            '#attributes' => ['class' => ['month']],
          ],
        ];

        $variables['content']['field_vactory_date_interval']['date_start_raw'] = [
          'day_full'    => $date_formater->format(strtotime($start_date), 'custom', 'l', $timezones),
          'day_short'   => $date_formater->format(strtotime($start_date), 'custom', 'd', $timezones),
          'month'       => $date_formater->format(strtotime($start_date), 'custom', 'F', $timezones),
          'month_short' => $date_formater->format(strtotime($start_date), 'custom', 'M', $timezones),
        ];
      }

      // End date.
      if (isset($end_date) && !empty($end_date) && $end_date != $start_date) {
        $variables['content']['field_vactory_date_interval']['date_end'] = [
          'day_full'  => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($end_date), 'custom', 'l', $timezones),
            '#attributes' => ['class' => ['day']],
          ],
          'day_short' => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($end_date), 'custom', 'd', $timezones),
            '#attributes' => ['class' => ['day-short']],
          ],
          'month'     => [
            '#type'       => 'html_tag',
            '#tag'        => 'span',
            '#value'      => $date_formater->format(strtotime($end_date), 'custom', 'F', $timezones),
            '#attributes' => ['class' => ['month']],
          ],
        ];

        $variables['content']['field_vactory_date_interval']['date_end_raw'] = [
          'day_full'    => $date_formater->format(strtotime($end_date), 'custom', 'l', $timezones),
          'day_short'   => $date_formater->format(strtotime($end_date), 'custom', 'd', $timezones),
          'month'       => $date_formater->format(strtotime($end_date), 'custom', 'F', $timezones),
          'month_short' => $date_formater->format(strtotime($end_date), 'custom', 'M', $timezones),
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function vactory_event_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  if ($view instanceof ViewExecutable && $view->id() === 'vactory_event' && $view->display_handler->getPluginId() === 'block') {
    $args = $view->args;
    $arguments_infos = $view->argument;
    if (count($args) > 2 && isset($args[2]) && is_array($args[2]) ) {
      $meta_data = $args[2];
      $args[0] = $meta_data['category_term_id'];
      $term = Drupal::entityTypeManager()->getStorage('taxonomy_term')
        ->load($args[0]);
      $parents = $term->get('parent')->getValue();
      $parents = array_filter($parents, function ($parent) {
        return $parent['target_id'] !== '0' && $parent['target_id'] !== 0;
      });
      $has_parent = !empty($parents);
      if (isset($meta_data['override_more_link']) && $meta_data['override_more_link']) {
        $use_more = $view->display_handler->options['use_more'];
        $link_display = $view->display_handler->options['link_display'];
        if ($use_more && $link_display) {
          $handlers_configurations = $view->displayHandlers->getConfiguration();
          if (isset($handlers_configurations[$link_display])) {
            $filters = $handlers_configurations[$link_display]['display_options']['filters'];
            if (!empty($filters)) {
              // Check in view filter if we have taxonomy tid depth filter.
              $taxonomy_tid_depth_filter = array_filter($filters, function ($filter) {
                return $filter['plugin_id'] === 'taxonomy_index_tid_depth';
              });
              $filters_ids = array_map(function ($filter) {
                return isset($filter['expose']['identifier']) ? $filter['expose']['identifier'] : $filter['id'];
              }, $filters);
              if (!empty($meta_data['field_name'])) {
                $arguments_infos = array_map(function ($arg_info) {
                  return $arg_info->definition['field_name'];
                }, $arguments_infos);
                $arguments_infos = array_values($arguments_infos);
                $field_names = $meta_data['field_name'];
                $more_link_params = [];
                foreach ($field_names as $field_name) {
                  $filter_index = array_search($field_name, $arguments_infos);
                  $filter_name = '';
                  // In case of parent term and view taxonomy tid depth filter exist.
                  if (!$has_parent && !empty($taxonomy_tid_depth_filter)) {
                    $filter_name = reset($taxonomy_tid_depth_filter)['id'];
                    $filter_name = !isset($more_link_params[$filter_name]) ? $filter_name : '';
                  }
                  if ($filter_index !== FALSE && empty($filter_name)) {
                    $matches = preg_grep('#(.)*' . $field_name . '(.)*#', array_flip($filters_ids));
                    if (!empty($matches)) {
                      $filter_name = array_keys($matches)[0];
                    }
                  }
                  if (!empty($filter_name) && $args[$filter_index] !== 'all') {
                    $more_link_params[$filter_name] = $args[$filter_index];
                  }
                }
                if (isset($variables['more']['#url'])) {
                  $listing_route = 'view.' . $view->id() . '.' . $link_display;
                  $variables['more']['#url'] = Url::fromRoute($listing_route, $more_link_params);
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_json_api_collection_alter().
 */
function vactory_event_json_api_collection_alter(&$filters, &$context) {
  $query = \Drupal::request()->query->get("q");
  $is_avenir = $context['id'] === 'vactory_event_list_a_venir' && isset($query["type"]) && $query["type"] == "avenir";
  $is_passe = $context['id'] === 'vactory_event_list_passe' && isset($query["type"]) && $query["type"] == "passe";
  if($context['id']=== 'next_event')
  {
    if (isset($query["date"])) {
    $filters["filter[date-filter-next][condition][path]"] = "field_vactory_date_interval.value";
    $filters["filter[date-filter-next][condition][operator]"] = ">";
    $filters["filter[date-filter-next][condition][value]"] = $query["date"]; 
    }
  }
  if ($context['id'] === 'vactory_event_list' || $is_avenir || $is_passe ) {
    if (isset($query["page"])) {
      $filters["page[offset]"] = intval($query["page"]) > 0 ? (intval($query["page"]) - 1) * $filters["page[limit]"] : 0;
    }

    if (isset($query["date"])) {
      $filters["filter[date-filter][condition][path]"] = "field_vactory_date_interval.value";
      $filters["filter[date-filter][condition][operator]"] = "=";
      $filters["filter[date-filter][condition][value]"] = $query["date"]; 
    }

    if (isset($query["theme"]) && $query["theme"] !== "all") {
      $theme = $query["theme"];
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'vid' => 'vactory_event_category',
        'term_2_slug' => $query["theme"]
      ]);

      if (!$terms) {
        throw new \Exception("[Event - hook_json_api_collection_alter] term '$theme' not found.");
      }

      if ($terms) {
        $term = reset($terms);
        $id = $term->id();
        $filters["filter[event_internal_category][condition][path]"] = "field_vactory_taxonomy_1.drupal_internal__tid";
        $filters["filter[event_internal_category][condition][operator]"] = "=";
        $filters["filter[event_internal_category][condition][value]"] = $id;
      }

    }
    if (isset($query["city"]) && $query["city"] !== "all") {
      $theme = $query["city"];
      $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'vid' => 'vactory_event_citys',
        'term_2_slug' => $query["city"]
      ]);

      if (!$terms) {
        throw new \Exception("[Events - hook_json_api_collection_alter] term '$theme' not found.");
      }
      if ($terms) {
        $term = reset($terms);
        $id = $term->id();
        $filters["filter[event_internal_city][condition][path]"] = "field_vactory_taxonomy_2.drupal_internal__tid";
        $filters["filter[event_internal_city][condition][operator]"] = "=";
        $filters["filter[event_internal_city][condition][value]"] = $id;
      }

    }
  }
  
}


/**
 * A custom hook to alter the node access.
 *
 * @param array $normalized_node
 *   An array that contains normalized node fields to be altered.
 * @param string $context
 *   Extra data has two keys:
 *     node: the related node object.
 *     node_type: the related node content type machine name.
 * @param string $base_node_type
 *   Base node content type machine name.
 */
function vactory_event_jsonapi_vcc_normalized_node_alter(&$normalized_node, $context, $base_node_type)
{
  if ($base_node_type === 'vactory_event') {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $context['node'];
    $node_type = $context['node_type'];
    if ($node_type === 'vactory_event') {
      // Get image.
      $lqipImageStyle = ImageStyle::load('lqip');
      $output_field_name = 'field_vactory_media';
      $mid = $node->get($output_field_name)->getString();
      $result[$output_field_name] = NULL;
      if (!empty($mid)) {
        $mid = (int) $mid;
        $media = Media::load($mid);
        if (
          $media &&
          $media->bundle() === 'image' &&
          isset($media->get('field_media_image')->getValue()[0]['target_id'])
        ) {
          $fid = $media->get('field_media_image')->getValue()[0]['target_id'];
          $file = File::load($fid);
          if ($file != NULL) {
            $uri = $file->getFileUri();
            $fileResult = [];
            $media_file_manager = \Drupal::service('vacory_decoupled.media_file_manager');
            $fileResult['_default'] = $media_file_manager->getMediaAbsoluteUrl($uri);
            $fileResult['_lqip'] = $media_file_manager->convertToMediaAbsoluteUrl($lqipImageStyle->buildUrl($uri));
            $fileResult['uri'] = StreamWrapperManager::getTarget($uri);
            $fileResult['fid'] = $fid;
            $fileResult['file_name'] = $media->label();
            $fileResult['meta'] = $media->get('field_media_image')
              ->first()
              ->getValue();
            $result[$output_field_name] = $fileResult;
          }
        }
      }


      // Get date.
      $dateFormats = \Drupal::entityTypeManager()
        ->getStorage('date_format')
        ->loadMultiple();
      $dateFormatter = \Drupal::service('date.formatter');
      $resultDate = [];
      $date = $node->get('field_vactory_date_interval')->getValue();
      if (isset($date[0])) {
        $start_date = DateTime::createFromFormat('Y-m-d', $date[0]['value']);
        $end_date = DateTime::createFromFormat('Y-m-d', $date[0]['end_value']);
        if ($start_date != '' && $end_date != '') {
          $start_date_timestamp = $start_date->getTimestamp();
          $end_date_timestamp = $end_date->getTimestamp();
          // Get date.
          $date_formats = array_keys($dateFormats);
          $resultDate['value']['timestamp'] = $start_date_timestamp;
          $resultDate['end_value']['timestamp'] = $end_date_timestamp;
          foreach ($date_formats as $key => $date_format) {
            $resultDate['value'][$date_format] = $dateFormatter->format($start_date_timestamp, $date_format);
            $resultDate['end_value'][$date_format] = $dateFormatter->format($end_date_timestamp, $date_format);
          }
        }
      }

      // Get term.
      $term_field_name = 'field_vactory_taxonomy_1';
      $event_term_tid = $node->get($term_field_name)->target_id ?? NULL;
      $term_tag = '';
      if ($event_term_tid != NULL) {
        $new_term = Term::load($event_term_tid);
        if ($new_term != NULL) {
          $new_term_trans = $term = \Drupal::service('entity.repository')
            ->getTranslationFromContext($new_term);
          $term_tag = [
            'name' => $new_term_trans->label(),
            'slug' => $new_term_trans->get('term_2_slug')->value ?? null,
          ];
        }
      }

      $term_field_name2 = 'field_vactory_taxonomy_2';
      $city_term_tid = $node->get($term_field_name2)->target_id ?? NULL;
      $city_tag = '';
      if ($city_term_tid != NULL) {
        $new_term = Term::load($city_term_tid);
        if ($new_term != NULL) {
          $new_term_trans = $term = \Drupal::service('entity.repository')
            ->getTranslationFromContext($new_term);
          $city_tag = [
            'name' => $new_term_trans->label(),
            'slug' => $new_term_trans->get('term_2_slug')->value ?? null,
          ];
        }
      }

      $normalized_node = [
        'id' => $node->id(),
        'image' => $result[$output_field_name],
        'date' => $resultDate,
        'tag' => $term_tag,
        'city' => $city_tag,
        'title' => $node->label(),
        'excerpt' => $node->get('field_vactory_excerpt')->getValue(),
        'url' => $node->toUrl()->toString(),
      ];
    }
  }
}
