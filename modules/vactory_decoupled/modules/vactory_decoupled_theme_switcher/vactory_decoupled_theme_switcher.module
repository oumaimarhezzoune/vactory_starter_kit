<?php

/**
 * @file
 * Module related hooks.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\vactory_decoupled_theme_switcher\Form\ThemeSwitcherRuleForm;
use Drupal\Core\Routing\RouteMatch;
use Drupal\Core\Routing\RouteObjectInterface;
use Symfony\Component\Routing\Route;
use Drupal\Core\DependencyInjection\ClassResolver;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\ParameterBag;

/**
 * Implements hook_entity_type_alter().
 */
function vactory_decoupled_theme_switcher_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  if (isset($entity_types['theme_switcher_rule'])) {
    $entity_types['theme_switcher_rule']
      ->setFormClass('add', ThemeSwitcherRuleForm::class)
      ->setFormClass('edit', ThemeSwitcherRuleForm::class);
  }
}

/**
 * Implements hook_decoupled_extra_field_value_alter().
 */
function vactory_decoupled_theme_switcher_decoupled_extra_field_value_alter(&$value, $context, CacheableMetadata $cacheability) {
  $nid = (int) $context['entity']->id();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $context['entity'];
  $route = new Route('/node/{node}');
  $route->setOption('parameters', [
    'node' => [
      'type' => 'entity:node',
      'converter' => 'paramconverter.entity',
    ],
  ]);
  $route_match = new RouteMatch('entity.node.canonical', $route, ['node' => $node], ['node' => $nid]);
  $parameters = $route_match->getRawParameters();
  $replace = [];
  foreach ($parameters->all() as $key => $param_value) {
    $replace['{' . $key . '}'] = $param_value;
  }
  $path = $route_match->getRouteObject()->getPath();
  $real_path = strtr($path, $replace);

  // Create request object.
  $request = Request::create($real_path);
  $request->attributes->add($route_match->getParameters()->all());
  $request->attributes->set(RouteObjectInterface::ROUTE_NAME, 'entity.node.canonical');
  $request->attributes->set(RouteObjectInterface::ROUTE_OBJECT, $route);
  $request->attributes->set('node', $node);
  $request->attributes->set('_raw_variables', new ParameterBag(['node' => $nid]));

  // Push additional request into stack so that RouteParamContext can access it.
  \Drupal::service('request_stack')->push($request);

  $negotiators = ['theme.negotiator.theme_switcher_negotiator'];
  $theme = determine_active_theme($negotiators, $route_match);

  // Pop our request from stack.
  \Drupal::service('request_stack')->pop();
  $value['theme'] = $theme;
  $cacheability->addCacheTags(['theme_switcher']);
}

/**
 * Get active theme.
 */
function determine_active_theme(array $negotiators, $route_match) {
  $container = \Drupal::getContainer();
  $resolver = new ClassResolver();
  $resolver->setContainer($container);
  foreach ($negotiators as $negotiator_id) {
    $negotiator = $resolver->getInstanceFromDefinition($negotiator_id);
    if ($negotiator->applies($route_match)) {
      $theme = $negotiator->determineActiveTheme($route_match);
      if ($theme !== NULL) {
        return $theme;
      }
    }
  }

  return "default";
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vactory_decoupled_theme_switcher_form_theme_switcher_admin_overview_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $description = [
    'description' => [
      '#markup' => theme_switcher_conditions_description(),
    ],
  ];
  $form = [...$description, ...$form];
  $form['#submit'][] = 'decoupled_theme_switcher_rules_configuration_submit';
}

/**
 * Theme switcher rules configuration custom submit.
 */
function decoupled_theme_switcher_rules_configuration_submit($form, FormStateInterface $form_state) {
  Cache::invalidateTags(['theme_switcher']);
}

/**
 * Get heme switcher conditions description.
 */
function theme_switcher_conditions_description() {
  $description_html = '<h4>‚ö†Ô∏è Conditions logic</h4>';
  $description_html .= '<p>üëâ The logic operator between each switch theme rule conditions is: <strong>AND</strong></p>';
  $description_html .= '<p>üëâ The logic operator between all switch theme rules is: <strong>OR</strong></p>';
  $description_html .= '<p>üëâ Rules are prioritized by weight, when a condition is satisfied in two different rules then the rule with smallest weight has high priority</p>';
  return $description_html;
}
